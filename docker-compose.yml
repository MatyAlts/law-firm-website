services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: law-firm-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: lawfirm
      POSTGRES_USER: ${DB_USER:-lawfirm}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - law-firm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lawfirm -d lawfirm || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  # Spring Boot Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: law-firm-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/lawfirm
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-lawfirm}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-changeme}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: false
      APP_CORS_ALLOWED_ORIGINS: ${FRONTEND_URL:-http://localhost}
    networks:
      - law-firm-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: law-firm-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:8080}
      API_BASE_URL: http://backend:8080
      NODE_ENV: production
    networks:
      - law-firm-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: law-firm-nginx
    restart: unless-stopped
    expose:
      - "80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - law-firm-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  law-firm-network:
    driver: bridge
